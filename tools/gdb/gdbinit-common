# If you want to use this gdbinit, run gdb with:
#   gdb-multiarch -q bin/laritos.elf -nx -ex "source tools/gdb/gdbinit-common"

set history save on
set history size unlimited

tui enable
layout src
layout regs
focus cmd
winheight src 30
winheight regs 13

#set print pretty on
set print array on

define wait_and_enable_tui
    printf "\nPress enter to return"
    shell read
    tui enable
end

define los_dump_log_buffer
    tui disable
    printf "%s", logb
    wait_and_enable_tui
end
document los_dump_log_buffer
Syntax: los_dump_log_buffer
Print the raw log circular buffer.
end

define los_dump_all_regs
    tui disable
    info registers
    tui enable
end
document los_dump_all_regs
Syntax: los_dump_all_regs
Dump all the registers
end

define los_dump_circbuf_pointers
    set $__cb = $arg0
    printf "buf=%p, head=%u, dlen=%5u\n", $__cb->buf, $__cb->head, $__cb->datalen
end
document los_dump_circbuf_pointers
Syntax: los_dump_circbuf_pointers <cbptr>
Dump the pointer of a cirbular buffer
Example of usage:
b circbuf_write
commands
silent
printf "write(%5u bytes)   ", n
set pagination off
los_dump_circbuf_pointers &logcb
set pagination on
continue
\end
b circbuf_read
commands
silent
printf "read (%5u bytes)   ", n
set pagination off
los_dump_circbuf_pointers &logcb
set pagination on
continue
\end
end

define los_dump_circbuf_x
    set $__i = 0
    set $__cb = $arg0
    set $__ptr = (unsigned char *) $__cb->buf
    tui disable
    printf "Available data: %d\n", $__cb->datalen
    printf "Size: %d\n", $__cb->size
    while ($__i < $__cb->size)
        if ( $__i == $__cb->head )
            echo \033[30m
            echo \033[102m
        else
            echo \033[0m
        end
        printf "%02x ", $__ptr[$__i]
        if ( $__i % 80 == 0)
            printf "\r\n"
        end
        set $__i++
    end
    printf "\r\n"
    wait_and_enable_tui
end
document los_dump_circbuf_x
Syntax: los_dump_circbuf_x <cbptr>
Dump the values (as hex) and pointers (head=green) of a circular buffer
end

define los_dump_circbuf_c
    set $__i = 0
    set $__cb = $arg0
    set $__ptr = $__cb->buf
    tui disable
    printf "Available data: %d\n", $__cb->datalen
    printf "Size: %d\n", $__cb->size
    while ($__i < $__cb->size)
        if ( $__i == $__cb->head )
            echo \033[30m
            echo \033[102m
        else
            echo \033[0m
        end
        printf "%c", $__ptr[$__i] == '\0' ? '.' : $__ptr[$__i]
        set $__i++
    end
    printf "\r\n"
    wait_and_enable_tui
end
document los_dump_circbuf_c
Syntax: los_dump_circbuf_c <cbptr>
Dump the values (as chars) and pointers (head=green) of a circular buffer.
end



# --------------------------------------------------
# Taken from https://github.com/gdbinit/Gdbinit/blob/master/gdbinit
# --------------------------------------------------

define flags
# conditional flags are
# negative/less than (N), bit 31 of CPSR
# zero (Z), bit 30
# Carry/Borrow/Extend (C), bit 29
# Overflow (V), bit 28
    # negative/less than (N), bit 31 of CPSR
    printf "cpsr=0x%x (", $cpsr
    if (($cpsr >> 0x1f) & 1)
        printf "N"
        set $_n_flag = 1
    else
        printf "."
        set $_n_flag = 0
    end
    # zero (Z), bit 30
    if (($cpsr >> 0x1e) & 1)
        printf "Z"
        set $_z_flag = 1
    else
        printf "."
        set $_z_flag = 0
    end
    # Carry/Borrow/Extend (C), bit 29
    if (($cpsr >> 0x1d) & 1)
        printf "C"
        set $_c_flag = 1
    else
        printf "."
        set $_c_flag = 0
    end
    # Overflow (V), bit 28
    if (($cpsr >> 0x1c) & 1)
        printf "V"
        set $_v_flag = 1
    else
        printf "."
        set $_v_flag = 0
    end
    # Sticky overflow (Q), bit 27    
    if (($cpsr >> 0x1b) & 1)
        printf "Q"
        set $_q_flag = 1
    else
        printf "."
        set $_q_flag = 0
    end
    # Java state bit (J), bit 24
    # When T=1:
    # J = 0 The processor is in Thumb state.
    # J = 1 The processor is in ThumbEE state.
    if (($cpsr >> 0x18) & 1)
        printf "J"
        set $_j_flag = 1
    else
        printf "."
        set $_j_flag = 0
    end
    # Data endianness bit (E), bit 9
    if (($cpsr >> 9) & 1)
        printf "E"
        set $_e_flag = 1
    else
        printf "."
        set $_e_flag = 0
    end
    # Imprecise abort disable bit (A), bit 8
    # The A bit is set to 1 automatically. It is used to disable imprecise data aborts. 
    # It might not be writable in the Nonsecure state if the AW bit in the SCR register is reset.
    if (($cpsr >> 8) & 1)
        printf "."
        set $_a_flag = 1
    else
        printf "A"
        set $_a_flag = 0
    end
    # IRQ disable bit (I), bit 7
    # When the I bit is set to 1, IRQ interrupts are disabled.
    if (($cpsr >> 7) & 1)
        printf "."
        set $_i_flag = 1
    else
        printf "I"
        set $_i_flag = 0
    end
    # FIQ disable bit (F), bit 6
    # When the F bit is set to 1, FIQ interrupts are disabled. 
    # FIQ can be nonmaskable in the Nonsecure state if the FW bit in SCR register is reset.
    if (($cpsr >> 6) & 1)
        printf "."
        set $_f_flag = 1
    else
        printf "F"
        set $_f_flag = 0
    end
    # Thumb state bit (F), bit 5
    # if 1 then the processor is executing in Thumb state or ThumbEE state depending on the J bit
    if (($cpsr >> 5) & 1)
        printf "T"
        set $_t_flag = 1
    else
        printf "."
        set $_t_flag = 0
    end
    # TODO: GE bit ?
    printf ") "

    set $mode = $cpsr & 0xf
    set $modestr = "???"
    if ($mode == 0)
        set $modestr = "usr"
    else
        if ($mode == 1)
            set $modestr = "fiq"
        else
            if ($mode == 2)
                set $modestr = "irq"
            else
                if ($mode == 3)
                    set $modestr = "svc"
                else
                    if ($mode == 6)
                        set $modestr = "mon"
                    else
                        if ($mode == 7)
                            set $modestr = "abt"
                        else
                            if ($mode == 10)
                                set $modestr = "hyp"
                            else
                                if ($mode == 11)
                                    set $modestr = "und"
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    printf "%c%c%c mode\n", $modestr[0], $modestr[1], $modestr[2]
end
document flags
Syntax: flags
| Auxiliary function to set ARM cpu flags.
end
